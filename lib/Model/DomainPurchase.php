<?php
/**
 * DomainPurchase
 *
 * PHP version 5
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoDaddyDomainsClient\Model;

use \ArrayAccess;

/**
 * DomainPurchase Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     GoDaddyDomainsClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DomainPurchase implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DomainPurchase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'domain' => 'string',
        'consent' => '\GoDaddyDomainsClient\Model\Consent',
        'period' => 'int',
        'name_servers' => 'string[]',
        'renew_auto' => 'bool',
        'privacy' => 'bool',
        'contact_registrant' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_admin' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_tech' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_billing' => '\GoDaddyDomainsClient\Model\Contact',
        'intent' => 'string',
        'entityType' => 'string',
        'citizenship'=> 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'domain' => 'domain',
        'consent' => 'consent',
        'period' => 'period',
        'name_servers' => 'nameServers',
        'renew_auto' => 'renewAuto',
        'privacy' => 'privacy',
        'contact_registrant' => 'contactRegistrant',
        'contact_admin' => 'contactAdmin',
        'contact_tech' => 'contactTech',
        'contact_billing' => 'contactBilling',
        'intent' => 'intent',
        'entityType' => 'entityType',
        'citizenship' => 'citizenship',
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'domain' => 'setDomain',
        'consent' => 'setConsent',
        'period' => 'setPeriod',
        'name_servers' => 'setNameServers',
        'renew_auto' => 'setRenewAuto',
        'privacy' => 'setPrivacy',
        'contact_registrant' => 'setContactRegistrant',
        'contact_admin' => 'setContactAdmin',
        'contact_tech' => 'setContactTech',
        'contact_billing' => 'setContactBilling',
        'intent' => 'setIntent',
        'entityType' => 'setEntityType',
        'citizenship' => 'setCitizenship'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'domain' => 'getDomain',
        'consent' => 'getConsent',
        'period' => 'getPeriod',
        'name_servers' => 'getNameServers',
        'renew_auto' => 'getRenewAuto',
        'privacy' => 'getPrivacy',
        'contact_registrant' => 'getContactRegistrant',
        'contact_admin' => 'getContactAdmin',
        'contact_tech' => 'getContactTech',
        'contact_billing' => 'getContactBilling',
        'intent' => 'getIntent',
        'entityType' => 'getEntityType',
        'citizenship' => 'getCitizenship',
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['consent'] = isset($data['consent']) ? $data['consent'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['name_servers'] = isset($data['name_servers']) ? $data['name_servers'] : null;
        $this->container['renew_auto'] = isset($data['renew_auto']) ? $data['renew_auto'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['contact_registrant'] = isset($data['contact_registrant']) ? $data['contact_registrant'] : null;
        $this->container['contact_admin'] = isset($data['contact_admin']) ? $data['contact_admin'] : null;
        $this->container['contact_tech'] = isset($data['contact_tech']) ? $data['contact_tech'] : null;
        $this->container['contact_billing'] = isset($data['contact_billing']) ? $data['contact_billing'] : null;
        $this->container['intent'] = isset($data['intent']) ? $data['intent'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['citizenship'] = isset($data['citizenship']) ? $data['citizenship'] : null;

    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['domain'] === null) {
            $invalid_properties[] = "'domain' can't be null";
        }
        if ($this->container['consent'] === null) {
            $invalid_properties[] = "'consent' can't be null";
        }
        if (!is_null($this->container['period']) && ($this->container['period'] > 10.0)) {
            $invalid_properties[] = "invalid value for 'period', must be smaller than or equal to 10.0.";
        }

        if (!is_null($this->container['period']) && ($this->container['period'] < 1.0)) {
            $invalid_properties[] = "invalid value for 'period', must be bigger than or equal to 1.0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['domain'] === null) {
            return false;
        }
        if ($this->container['consent'] === null) {
            return false;
        }
        if ($this->container['period'] > 10.0) {
            return false;
        }
        if ($this->container['period'] < 1.0) {
            return false;
        }
        return true;
    }


    /**
     * Gets domain
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     * @param string $domain For internationalized domain names with non-ascii characters, the domain name is converted to punycode before format and pattern validation rules are checked
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets consent
     * @return \GoDaddyDomainsClient\Model\Consent
     */
    public function getConsent()
    {
        return $this->container['consent'];
    }

    /**
     * Sets consent
     * @param \GoDaddyDomainsClient\Model\Consent $consent
     * @return $this
     */
    public function setConsent($consent)
    {
        $this->container['consent'] = $consent;

        return $this;
    }

    /**
     * Gets period
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param int $period
     * @return $this
     */
    public function setPeriod($period)
    {

        if ($period > 10.0) {
            throw new \InvalidArgumentException('invalid value for $period when calling DomainPurchase., must be smaller than or equal to 10.0.');
        }
        if ($period < 1.0) {
            throw new \InvalidArgumentException('invalid value for $period when calling DomainPurchase., must be bigger than or equal to 1.0.');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets name_servers
     * @return string[]
     */
    public function getNameServers()
    {
        return $this->container['name_servers'];
    }

    /**
     * Sets name_servers
     * @param string[] $name_servers
     * @return $this
     */
    public function setNameServers($name_servers)
    {
        $this->container['name_servers'] = $name_servers;

        return $this;
    }

    /**
     * Gets renew_auto
     * @return bool
     */
    public function getRenewAuto()
    {
        return $this->container['renew_auto'];
    }

    /**
     * Sets renew_auto
     * @param bool $renew_auto
     * @return $this
     */
    public function setRenewAuto($renew_auto)
    {
        $this->container['renew_auto'] = $renew_auto;

        return $this;
    }

    /**
     * Gets privacy
     * @return bool
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     * @param bool $privacy
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets contact_registrant
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactRegistrant()
    {
        return $this->container['contact_registrant'];
    }

    /**
     * Sets contact_registrant
     * @param \GoDaddyDomainsClient\Model\Contact $contact_registrant
     * @return $this
     */
    public function setContactRegistrant($contact_registrant)
    {
        $this->container['contact_registrant'] = $contact_registrant;

        return $this;
    }

    /**
     * Gets contact_admin
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactAdmin()
    {
        return $this->container['contact_admin'];
    }

    /**
     * Sets contact_admin
     * @param \GoDaddyDomainsClient\Model\Contact $contact_admin
     * @return $this
     */
    public function setContactAdmin($contact_admin)
    {
        $this->container['contact_admin'] = $contact_admin;

        return $this;
    }

    /**
     * Gets contact_tech
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactTech()
    {
        return $this->container['contact_tech'];
    }

    /**
     * Sets contact_tech
     * @param \GoDaddyDomainsClient\Model\Contact $contact_tech
     * @return $this
     */
    public function setContactTech($contact_tech)
    {
        $this->container['contact_tech'] = $contact_tech;

        return $this;
    }

    /**
     * Gets contact_billing
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactBilling()
    {
        return $this->container['contact_billing'];
    }

    /**
     * Sets contact_billing
     * @param \GoDaddyDomainsClient\Model\Contact $contact_billing
     * @return $this
     */
    public function setContactBilling($contact_billing)
    {
        $this->container['contact_billing'] = $contact_billing;

        return $this;
    }
    /**
     * Gets intent
     * @return string
     */
    public function getIntent()
    {
        return $this->container['intent'];
    }

    /**
     * Sets intent
     * @param string $intent The intended use of the domain
     * @return $this
     */
    public function setIntent($intent)
    {
        $this->container['intent'] = $intent;

        return $this;
    }
    /**
     * Gets entityType
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     * @param string $entityType Type of legal entity that best represents the Registrant. \nIf legal registrant is a person, use: CITIZEN, PERMANENT_RESIDENT or PRIMARY_DOMICILE. \nIf legal registrant is a company, use: INCORPORATED, FOREIGN_BUSINESS or FOREIGN_OFFICE
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }
    /**
     * Gets citizenship
     * @return string
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     * @param string $citizenship
     * @return $this
     */
    public function setCitizenship($citizenship)
    {
        $this->container['citizenship'] = $citizenship;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
